const db = require('../../database/instance');
const fs = require('fs');
const path = require('path');

const TYPES = {
    string: 'DataTypes.STRING',
    bin: 'DataTypes.STRING.BINARY',
    text: 'DataTypes.TEXT',
    tinytext: 'DataTypes.TINYTEXT',
    citext: 'DataTypes.CITEXT',
    int: 'DataTypes.INTEGER',
    bigint: 'DataTypes.BIGINT',
    float: 'DataTypes.FLOAT',
    real: 'DataTypes.REAL',
    double: 'DataTypes.DOUBLE',
    decimal: 'DataTypes.DECIMAL',
    date: 'DataTypes.DATE',
    dateonly: 'DataTypes.DATEONLY',
    bool: 'DataTypes.BOOLEAN',
    enum: 'DataTypes.ENUM',
    array: 'DataTypes.ARRAY',
    json: 'DataTypes.JSON',
    jsonb: 'DataTypes.JSONB',
    blob: 'DataTypes.BLOB',
    tinyblob: 'DataTypes.BLOB',
    uuid: 'DataTypes.UUID',
    cidr: 'DataTypes.CIDR',
    inet: 'DataTypes.INET',
    mac: 'DataTypes.MACADDR',
    range: 'DataTypes.RANGE',
    geom: 'DataTypes.GEOMETRY',
};

function fillTemplate(name, definition, options) {
    const realName = name
        .ToCamelCase()
        .Capitalize();
    return `/**
* the Model was generated by API Boy
**/
const {Model} = require('sequelize');

module.exports = (sequelize, DataTypes) => {
    class ${realName} extends Model { }
    ${realName}.init(${definition}, ${options});
    return ${realName};
};`;
}

function parseDefinition(def) {
    let tmp = '{\n';
    for (const key of Object.keys(def)) {
        const typeDefinition = def[key];
        tmp += `\t\t${key}: ${selectType(typeDefinition)}\n`;
    }
    tmp += '\t}';
    return tmp;
}

function selectType(def) {
    let tmp = TYPES[def.type];
    switch (def.type) {
        case 'cidr':
        case 'inet':
        case 'mac':
        case 'uuid':
        case 'json':
        case 'jsonb':
        case 'bool':
        case 'dateonly':
        case 'int':
        case 'citext':
        case 'bin':
        case 'blob':
            break;
        case 'string':
        case 'tinytext':
        case 'bigint':
        case 'float':
        case 'real':
        case 'decimal':
        case 'date':
        case 'enum':
        case 'array':
        case 'tinyblob':
        case 'range':
        case 'geometry':
            let ele = '{';
            for (const key of Object.keys(def.options)) {
                ele += `${key}:${def.options[key]}`;
            }
            tmp += `(${ele}})`;
            break;
    }
    return tmp;
}

function parseOptions(opts) {
    return '{ sequelize }';
}

module.exports.POST = (req, res, next) => {
    if (!req.body || !req.body.name || !req.body.definition || !req.body.options) {
        next({error: 'invalid model definition',msg:null});
        return;
    }

    const file = path.join(__dirname, '..', '..', 'models', `${req.body.name.ToLowerCase()}.model.js`);
    if (fs.existsSync(file)) {
        fs.unlinkSync(file);
    }
    fs.writeFileSync(file, fillTemplate(req.body.name, parseDefinition(req.body.definition), parseOptions(req.body.options)));
    db.sync().then(next({error:null,msg:'model created'}));
};
